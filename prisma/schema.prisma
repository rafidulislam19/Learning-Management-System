datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id String @id @default(uuid())
  userId String 
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  
  chapters Chapter[]
  quizzes Quiz[] // Added relation to quizzes
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[] 
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  type String @default("chapter")

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  attachments Attachment[]

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Quiz {
  id String @id @default(uuid())
  title String
  position Int
  isPublished Boolean @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  type String @default("quiz")

  questions QuizQuestion[]
  progress QuizProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model QuizQuestion {
  id String @id @default(uuid())
  questionText String @db.Text
  options Json // Store options as JSON (e.g., {"A": "Answer 1", "B": "Answer 2"})
  correctAnswer String

  quizId String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
}

model QuizProgress {
  id String @id @default(uuid())
  userId String
  quizId String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score Float
  answers Json // Store user's answers (e.g., {"questionId": "A", "questionId2": "B"})
  userAnswers Json // Store user-friendly answers (e.g., {"What is 2+2?": "4", "What is the capital of France?": "Paris"})
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
  @@unique([userId, quizId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD
=======
}

model TransactionHistory {
  id            String   @id @default(uuid())
  transactionId String   @unique
  status        String
  userId        String
  courseId      String
  amount        Float
  currency      String
  createdAt     DateTime @default(now())

  @@index([transactionId])
}

model PendingTransaction {
  id            String  @id @default(uuid())
  transactionId String  @unique
  userId        String
  courseId      String
  amount        Float
  currency      String
  createdAt     DateTime @default(now())

  @@index([transactionId])
>>>>>>> a21e24b (Pay Station Integration)
}